from flask import Flask, request, jsonify
import PyPDF2
import requests
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from pymongo import MongoClient

app = Flask(__name__)

# MongoDB Setup
MONGO_URI = "mongodb+srv://divyajeganathan:XV9ZRwiupdm1p00K@cluster0.1koquxi.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)
db = client['pdf_db']
collection = db['pdf_documents']

# Gemini API Setup
gemini_api_key = "AIzaSyBmPISv6sT1EyNEmb0gkux0j07yxG9w8EgY"
gemini_api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_api_key}"

# --- Text Processing Functions ---

def extract_text_from_pdf(pdf_file):
    reader = PyPDF2.PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text

# NEW: Chunking function with fixed-size tokens + overlap
def chunk_text(text, chunk_size=200, overlap=50):
    words = text.split()
    chunks = []
    for i in range(0, len(words), chunk_size - overlap):
        chunk = " ".join(words[i:i+chunk_size])
        chunks.append(chunk)
    return chunks

def retrieve_relevant_context(query, documents):
    vectorizer = TfidfVectorizer(stop_words='english')
    combined_documents = documents + [query]
    tfidf_matrix = vectorizer.fit_transform(combined_documents)

    cosine_similarities = cosine_similarity(tfidf_matrix[-1:], tfidf_matrix[:-1])
    most_similar_idx = np.argmax(cosine_similarities)
    return documents[most_similar_idx]

def get_answer_from_gemini(query, context):
    payload = {
        "contents": [{"parts": [{"text": f"{context}\n\nQuestion: {query}"}]}],
        "generationConfig": {"temperature": 0.7, "frequencyPenalty": 0.0}
    }
    headers = {
        "Content-Type": "application/json"
    }
    response = requests.post(gemini_api_url, json=payload, headers=headers)

    if response.status_code == 200:
        try:
            return response.json()["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            return f"Error parsing Gemini response: {e}"
    else:
        return f"Error from Gemini API: {response.status_code}, {response.text}"

# --- Flask Routes ---

@app.route('/')
def home():
    return "This is a PDF Q&A system using Gemini API with improved token-based chunking!"

@app.route('/upload_pdf', methods=['POST'])
def upload_pdf():
    if 'pdf_file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    
    pdf_file = request.files['pdf_file']
    if pdf_file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    try:
        pdf_text = extract_text_from_pdf(pdf_file)
        chunks = chunk_text(pdf_text)  # <- Use improved chunking here

        collection.delete_many({})
        for chunk in chunks:
            if chunk.strip():
                collection.insert_one({"text": chunk})

        return jsonify({"message": "PDF uploaded and stored in MongoDB with token-based chunks!"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/ask_question', methods=['POST'])
def ask_question():
    data = request.get_json()
    query = data.get('query')
    documents_cursor = collection.find()
    documents = [doc['text'] for doc in documents_cursor]

    if not documents:
        return jsonify({"error": "No PDF processed yet. Please upload a PDF first."}), 400

    context = retrieve_relevant_context(query, documents)
    answer = get_answer_from_gemini(query, context)
    if answer:
        return jsonify({"answer": answer}), 200
    else:
        return jsonify({"error": "Could not retrieve an answer from Gemini."}), 500

if __name__ == '__main__':
    app.run(debug=True)
